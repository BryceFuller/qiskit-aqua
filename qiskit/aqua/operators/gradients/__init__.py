# This code is part of Qiskit.
#
# (C) Copyright IBM 2020.
#
# This code is licensed under the Apache License, Version 2.0. You may
# obtain a copy of this license in the LICENSE.txt file in the root directory
# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.
#
# Any modifications or derivative works of this code must retain this
# copyright notice, and modified files need to carry a notice indicating
# that they have been altered from the originals.

"""
Gradients (:mod:`qiskit.aqua.operators.gradients`)
==================================================

Given an operator that represents either a quantum state resp. an expectation value, the gradient framework enables
the evaluation of gradients, natural gradients, Hessians, as well as the Quantum Fisher Information.

Suppose a parameterized quantum state `|ψ(θ)〉 = V(θ)|ψ〉` with input state `|ψ〉` and parametrized Ansatz `V(θ)`,
and an Operator `O(ω)`.

Gradients: 
We want to compute one of:
:math:`d⟨ψ(θ)|O(ω)|ψ(θ)〉/ dω`
:math:`d⟨ψ(θ)|O(ω)|ψ(θ)〉/ dθ`
:math:`d⟨ψ(θ)|i〉⟨i|ψ(θ)〉/ dθ`

The last case corresponds to the gradient w.r.t. the sampling probabilities of `|ψ(θ)`.
These gradients can be computed with different methods, i.e. a parameter shift, a linear combination of unitaries
and a finite difference method.

Hessians: 
We want to compute one of:
:math:`d^2⟨ψ(θ)|O(ω)|ψ(θ)〉/ dω^2`
:math:`d^2⟨ψ(θ)|O(ω)|ψ(θ)〉/ dθ^2`
:math:`d^2⟨ψ(θ)|O(ω)|ψ(θ)〉/ dθdω`
:math:`d^2⟨ψ(θ)|i〉⟨i|ψ(θ)〉/ dθ^2`.

The last case corresponds to the Hessian w.r.t. the sampling probabilities of `|ψ(θ)`.
Just as the first order gradients, the Hessians can be evaluated with different methods, i.e. a parameter shift, a
linear combination of unitaries and a finite difference method.


QFI: 
The Quantum Fisher Information `QFI` is a metric tensor which is representative for the representation capacity
of a parameterized quantum state `|ψ(θ)〉 = V(θ)|ψ〉` generated by an input state `|ψ〉` and a parametrized Ansatz
`V(θ)`.
The entries of the `QFI` for a pure state read :math:`[QFI]kl= Re[〈∂kψ|∂lψ〉−〈∂kψ|ψ〉〈ψ|∂lψ〉] * 4`.

Just as for the previous derivative types, the QFI can be computed using different methods: a full representation
based on a linear combination of unitaries implementation, a block-diagonal and a diagonal representation based on
an overlap method.

NaturalGradients: 
The natural gradient is a special gradient method which rescales a gradient w.r.t. a state
parameter with the inverse of the corresponding Quantum Fisher Information (QFI)
:math:`QFI^-1 d⟨ψ(θ)|O(ω)|ψ(θ)〉/ dθ`.
Hereby, we can choose a gradient as well as a QFI method and a regularization method which is used together with a
least square solver instead of exact invertion of the QFI:

.. currentmodule:: qiskit.aqua.operators.gradients

Base Classes
============

.. autosummary::
   :toctree: ../stubs/
   :nosignatures:

   DerivativeBase
   GradientBase
   HessianBase
   QFIBase

Converters
==========

.. autosummary::
   :toctree: ../stubs/
   :nosignatures:

   CircuitGradient
   CircuitQFI

Derivatives
===========

.. autosummary::
   :toctree: ../stubs/
   :nosignatures:

   Gradient
   Hessian
   NaturalGradient
   QFI

"""

from .circuit_gradients.circuit_gradient import CircuitGradient
from .circuit_qfis.circuit_qfi import CircuitQFI
from .derivative_base import DerivativeBase
from .gradient_base import GradientBase
from .gradient import Gradient
from .natural_gradient import NaturalGradient
from .hessian_base import HessianBase
from .hessian import Hessian
from .qfi_base import QFIBase
from .qfi import QFI

__all__ = ['DerivativeBase',
           'CircuitGradient',
           'GradientBase',
           'Gradient',
           'NaturalGradient',
           'HessianBase',
           'Hessian',
           'QFIBase',
           'QFI',
           'CircuitQFI']
